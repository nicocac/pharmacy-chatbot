name: Deploy Pharmacy Chatbot with SST

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
      
      - name: Run tests
        working-directory: backend
        run: npm test
      
      - name: Run linting
        working-directory: backend
        run: npm run lint

  deploy:
    name: Deploy with SST
    runs-on: ubuntu-latest
    needs: test
    outputs:
      api-url: ${{ steps.deploy.outputs.api-url }}
      frontend-url: ${{ steps.deploy.outputs.frontend-url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Install root dependencies
        run: npm ci
      
      - name: Install backend dependencies
        working-directory: backend
        run: npm ci
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build backend
        working-directory: backend
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy with SST
        id: deploy
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Deploy to production stage
          npx sst deploy --stage production
          
          # Capture outputs
          API_URL=$(npx sst output api --stage production)
          FRONTEND_URL=$(npx sst output frontend --stage production)
          
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "frontend-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          
          echo "✅ Deployment completed"
          echo "🚀 API URL: $API_URL"
          echo "🌐 Frontend URL: $FRONTEND_URL"
      
      - name: Set OpenAI API Key Secret
        run: |
          npx sst secret set OpenAIAPIKey "${{ secrets.OPENAI_API_KEY }}" --stage production

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Test API health
        run: |
          API_URL="${{ needs.deploy.outputs.api-url }}"
          echo "Testing API at: $API_URL"
          
          # Test pharmacies endpoint
          curl -f "$API_URL/api/chatbot/pharmacies" || exit 1
          echo "✅ Pharmacies endpoint working"
          
          # Test basic health
          curl -f "$API_URL/health" || echo "⚠️  Health endpoint not available (optional)"
      
      - name: Test Frontend
        run: |
          FRONTEND_URL="${{ needs.deploy.outputs.frontend-url }}"
          echo "Testing Frontend at: $FRONTEND_URL"
          
          # Test frontend loads
          curl -f "$FRONTEND_URL" || exit 1
          echo "✅ Frontend loading successfully"
      
      - name: Test Chat Functionality
        run: |
          API_URL="${{ needs.deploy.outputs.api-url }}"
          
          # Test start chat endpoint
          RESPONSE=$(curl -s -X POST "$API_URL/api/chatbot/start" \
            -H "Content-Type: application/json" \
            -d '{"phoneNumber": "+1-555-GITHUB-ACTION-TEST"}')
          
          echo "Chat start response: $RESPONSE"
          
          # Check if response contains success
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "✅ Chat functionality working"
          else
            echo "❌ Chat functionality failed"
            exit 1
          fi

  cleanup:
    name: Cleanup Test Data
    runs-on: ubuntu-latest
    needs: [deploy, test-deployment]
    if: always()
    
    steps:
      - name: Cleanup test conversations
        run: |
          echo "🧹 Cleanup completed (test conversations are temporary)"
          echo "✨ Deployment successful!"
        
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | URL | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| API | ${{ needs.deploy.outputs.api-url }} | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.deploy.outputs.frontend-url }} | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Visit the frontend URL to test the chatbot" >> $GITHUB_STEP_SUMMARY
          echo "- Check CloudWatch logs for any issues" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor costs in AWS Cost Explorer" >> $GITHUB_STEP_SUMMARY