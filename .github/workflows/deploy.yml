name: Deploy Pharmacy Chatbot

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    outputs:
      backend-repo: ${{ steps.deploy.outputs.backend-repo }}
      frontend-bucket: ${{ steps.deploy.outputs.frontend-bucket }}
      cloudfront-id: ${{ steps.deploy.outputs.cloudfront-id }}
      backend-service: ${{ steps.deploy.outputs.backend-service }}
      cluster-name: ${{ steps.deploy.outputs.cluster-name }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json
      
      - name: Install CDK dependencies
        working-directory: infrastructure
        run: npm ci
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Bootstrap CDK
        working-directory: infrastructure
        run: npx cdk bootstrap
      
      - name: Deploy CDK Stack
        id: deploy
        working-directory: infrastructure
        run: |
          OUTPUTS=$(npx cdk deploy --require-approval never --outputs-file outputs.json)
          echo "backend-repo=$(jq -r '.PharmacyChatbotStack.BackendRepositoryUri' outputs.json)" >> $GITHUB_OUTPUT
          echo "frontend-bucket=$(jq -r '.PharmacyChatbotStack.FrontendBucketName' outputs.json)" >> $GITHUB_OUTPUT
          echo "cloudfront-id=$(jq -r '.PharmacyChatbotStack.CloudFrontDistributionId' outputs.json)" >> $GITHUB_OUTPUT
          echo "backend-service=$(jq -r '.PharmacyChatbotStack.BackendServiceName' outputs.json)" >> $GITHUB_OUTPUT
          echo "cluster-name=$(jq -r '.PharmacyChatbotStack.ECSClusterName' outputs.json)" >> $GITHUB_OUTPUT

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push backend image
        working-directory: backend
        run: |
          docker build -t ${{ needs.deploy-infrastructure.outputs.backend-repo }}:${{ github.sha }} .
          docker tag ${{ needs.deploy-infrastructure.outputs.backend-repo }}:${{ github.sha }} ${{ needs.deploy-infrastructure.outputs.backend-repo }}:latest
          docker push ${{ needs.deploy-infrastructure.outputs.backend-repo }}:${{ github.sha }}
          docker push ${{ needs.deploy-infrastructure.outputs.backend-repo }}:latest
      
      - name: Update OpenAI API Key in Secrets Manager
        run: |
          aws secretsmanager update-secret \
            --secret-id $(aws secretsmanager list-secrets --query "SecretList[?contains(Name, 'OpenAISecret')].Name" --output text) \
            --secret-string '{"openai_api_key":"${{ secrets.OPENAI_API_KEY }}"}'
      
      - name: Force ECS service update
        run: |
          aws ecs update-service \
            --cluster ${{ needs.deploy-infrastructure.outputs.cluster-name }} \
            --service ${{ needs.deploy-infrastructure.outputs.backend-service }} \
            --force-new-deployment
      
      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ needs.deploy-infrastructure.outputs.cluster-name }} \
            --services ${{ needs.deploy-infrastructure.outputs.backend-service }}

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Build frontend
        working-directory: frontend
        env:
          REACT_APP_API_URL: https://${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy to S3
        run: |
          aws s3 sync frontend/build/ s3://${{ needs.deploy-infrastructure.outputs.frontend-bucket }} --delete
      
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ needs.deploy-infrastructure.outputs.cloudfront-id }} \
            --paths "/*"

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-backend, deploy-frontend]
    
    steps:
      - name: Test backend health
        run: |
          BACKEND_URL="https://${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}"
          curl -f "$BACKEND_URL/api/chatbot/pharmacies" || exit 1
      
      - name: Test frontend
        run: |
          FRONTEND_URL="https://${{ needs.deploy-infrastructure.outputs.cloudfront-domain }}"
          curl -f "$FRONTEND_URL" || exit 1